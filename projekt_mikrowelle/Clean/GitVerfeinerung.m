function [Nr,Tr,Pr]=GitVerfeinerung(N,T,P);%% einfache Gitterverfeinerung% Nr,Tr,Pr -> Neuen Knoten, Dreiecken und %             Material-Konstanten% Neue Knoten Liste startet mit aelte.Nr=N;                     nn=size(N,1);% Dreieck start from scratchTr=[];                           nt=0;Pr=[];% aufbau 4 neuen Dreieckenfor j=1:size(T,1),                 % Knoten von der Dreieck j  i=T(j,1:3);  % Koord. die Knoten der Dreieck j   n=N(i,:);  % 3 neue Knoten            n(4,:)=(n(1,:)+n(2,:))/2;        n(5,:)=(n(1,:)+n(3,:))/2;  n(6,:)=(n(2,:)+n(3,:))/2;  % einfuege neue Knoten in Nr falls man es nicht hat  for k=4:6,    % check die x-Koord.     l=find(Nr(:,1)==n(k,1));    % check die y-Koord.        m=find(Nr(l,2)==n(k,2));    % l et m peuvent etre des vecteurs!!    % falls man den Knoten nicht hat -> einfuegen    if isempty(m), % isempty returns 1 if m is empty                   % 0 else                     nn=nn+1;      Nr(nn,:)=n(k,:);      i(k)=nn;    else      % habe den Knoten gefunden      i(k)=l(m);                    end;  end;     % einfuege 4 neuen Dreiecken  Tr(nt+1,:)=[i(1) i(4) i(5) T(j,4) 0 T(j,6)];     Tr(nt+2,:)=[i(5) i(4) i(6) 0 0 0];    Tr(nt+3,:)=[i(6) i(4) i(2) 0 T(j,4) T(j,5)];    Tr(nt+4,:)=[i(6) i(3) i(5) T(j,5) T(j,6) 0];    % Tr(nt+4,:)=[i(3) i(5) i(6) T(j,6) 0 T(j,5)];  % orden nicht wichtig  Pr(nt+1:nt+4)=P(j);  nt=nt+4;end;